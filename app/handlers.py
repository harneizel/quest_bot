from aiogram import Router, F, Bot, Dispatcher
import config
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from geopy.distance import geodesic
import app.keyboards as kb
import app.database as db
import const_and_texts as ct

bot = Bot(token=config.TOKEN)
dp = Dispatcher()
router = Router()

class b:
    k = 0 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–æ—Ç–æ—á–µ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    l = 0  # —Å—á—ë—Ç—á–∏–∫
    cords = [] # –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –≥–µ–æ—Ç–æ—á–∫–∞–º–∏
    preview = None # –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é
    type = None # —Ç–∏–ø –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏


class Form(StatesGroup):        # –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    caption_rout = State()      # –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
    number_points = State()     # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–æ—Ç–æ—á–µ–∫
    lat = State()
    prev = State()              # –ø—Ä–µ–≤—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
    prev_onl = State()          # –ø—Ä–µ–≤—å—é –æ–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
    chosen_route_off = State()
    chosen_route_onl = State()
    number_route = State()


async def dont_understand(mess): # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await mess.reply(ct.TEXT1)

async def delete_messages(id):
    bm_id = await db.show_bm_id(id)
    await bot.delete_message(chat_id=id, message_id=bm_id)
    await bot.delete_message(chat_id=id, message_id=bm_id-1)
    await bot.delete_message(chat_id=id, message_id=bm_id-2)

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await db.cmd_start_db(message.from_user.id)
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(ct.TEXT2, reply_markup=kb.main_admin)
    else:
        await message.answer(ct.TEXT3, reply_markup=kb.main)

# –ø–æ–∏—Å–∫ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
@router.message(F.text == ct.BUTTON2)
async def search(message: Message):
    await message.answer('–ú–∞—Ä—à—Ä—É—Ç –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏?', reply_markup=kb.menu)

# –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç—ã
@router.callback_query(F.data == 'rout_offline')
async def chosen_offline(callback: CallbackQuery, state: FSMContext):
    a = await db.show_offline()
    await callback.message.answer(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:\n{a}\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç–µ', reply_markup=kb.locate)
    await state.set_state(Form.chosen_route_off)
    await db.set_type_ofl(callback.from_user.id)

# –æ–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç—ã
@router.callback_query(F.data == 'rout_online')
async def chosen_online(callback: CallbackQuery, state: FSMContext):
    a = await db.show_online()
    await callback.message.answer(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:\n{a}\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç–µ', reply_markup=kb.locate)
    await state.set_state(Form.chosen_route_onl)
    await db.set_type_onl(int(callback.from_user.id))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Form.chosen_route_off)
async def chosen_route_off(message: Message, state: FSMContext):
    number = int(message.text)
    await db.set_number(number, message.from_user.id)
    await state.clear()
    caption = await db.get_caption_off(message.from_user.id)
    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: {str(caption)}")

#–Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Form.chosen_route_onl)
async def chosen_route_onl(message: Message, state: FSMContext):
    number = int(message.text)
    await db.set_number(number, message.from_user.id)
    await state.clear()
    photo = FSInputFile('instruction.jpg')/home/sapsan
    await message.answer_photo(photo, caption='–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏')


# —Å–æ–∑–¥–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞ —Å –≥–µ–æ—Ç–æ—á–∫–∞–º–∏
@router.message(Form.lat)
async def cords_point(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    b.cords.append(message.location.latitude)
    b.cords.append(message.location.longitude)
    b.l += 1
    if b.l >= b.k:
        for i in range((10 - b.k)*2): # 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ—á–µ–∫, —Ü–∏–∫–ª –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ —Ç–æ—á–∫–∏ –Ω—É–ª—è–º–∏
            b.cords.append(0)
        await db.add_online_rout(b.cords)
        await state.clear()
        b.cords = []
        await message.answer('–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    else:
        await message.answer(f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≥–µ–æ—Ç–æ—á–∫—É –Ω–æ–º–µ—Ä {b.l+1}')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å—è–ª—Ü–∏–∏
@router.message(F.location)
async def location_o(message: Message):
    flag = await db.show_flag(message.from_user.id)
    if flag == 0:
        a = await db.get_cords(message.from_user.id)
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ —Ç–æ—á–∫—É ‚Ññ1:')
        await bot.send_location(chat_id=message.from_user.id, latitude=a[0], longitude=a[1])
        cords = (message.location.latitude, message.location.longitude)
        dist = int(geodesic((a[0], a[1]), cords).meters)
        msg = await message.answer(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö: {dist}", reply_markup=kb.check_loc)
        await db.set_bm_id(message.from_user.id, msg.message_id)
    else:
        await message.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"')

# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
@router.callback_query(F.data == 'send_location')
async def check_locate(callback: CallbackQuery):
    await db.flag1(callback.from_user.id)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ —Ç–æ—á–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏
@router.edited_message(F.location)
async def edited_message_handler(edited_message: Message):
    flag1 = await db.flag1_view(edited_message.from_user.id)
    if flag1 == 1:
        await db.flag1_set0(edited_message.from_user.id)
        a = await db.get_cords(edited_message.from_user.id)
        cords = (edited_message.location.latitude, edited_message.location.longitude)
        dist = int(geodesic((a[0], a[1]), cords).meters)
        if dist>ct.RADIUS:                         #–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –¥–æ—à—ë–ª –¥–æ —Ç–æ—á–∫–∏
            bm_id = await db.show_bm_id(edited_message.from_user.id)
            await edited_message.bot.edit_message_text(text=f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö: {dist}",
                                                        chat_id=edited_message.from_user.id,
                                                        reply_markup=kb.check_loc, message_id=bm_id)
        elif dist<=ct.RADIUS and a[2]==a[3]:       # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª –º–∞—Ä—à—Ä—É—Ç
            await delete_messages(edited_message.from_user.id)
            await edited_message.answer('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –º–∞—Ä—à—Ä—É—Ç!')
            await db.delete_prog(edited_message.from_user.id)
        else:                               #–µ—Å–ª–∏ —é–∑–µ—Ä —Å–æ–±—Ä–∞–ª —Ç–æ—á–∫—É
            await delete_messages(edited_message.from_user.id)
            point = await db.plus_get_point(edited_message.from_user.id)
            await edited_message.answer(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–æ—á–∫–∏ ‚Ññ{point+1}, —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ ‚Ññ{point+2}")
            a = await db.get_cords(edited_message.from_user.id)
            await bot.send_location(chat_id=edited_message.from_user.id, latitude=a[0], longitude=a[1])
            dist = int(geodesic((a[0], a[1]), cords).meters)
            msg = await edited_message.answer(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ –≤ –º–µ—Ç—Ä–∞—Ö: {dist}", reply_markup=kb.check_loc)
            await db.set_bm_id(edited_message.from_user.id, msg.message_id)

# —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
@router.message(F.text== ct.BUTTON7)
async def reset_progress(message: Message):
    await message.answer("–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–º—É?", reply_markup=kb.progress)

#—Å–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.callback_query(F.data == 'yes')
async def reset_prog_yes(callback: CallbackQuery):
    await db.delete_prog(callback.from_user.id)
    await callback.message.answer('–°–±—Ä–æ—Å–∏–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')

@router.callback_query(F.data == 'no')
async def reset_prog_no(callback: CallbackQuery):
    await callback.message.answer("–ù–µ —Å–±—Ä–∞—Å—ã–≤–∞—é –ø—Ä–æ–≥—Ä–µ—Å—Å")


# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
@router.message(F.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
async def back_menu(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(text='–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.main_admin)
    else:
        await message.answer(text='–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=kb.main)

# –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞
@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def cmd_my_id(message: Message):
    await message.answer(f'–í–∞—à ID: {message.from_user.id}\n–í–∞—à–µ –∏–º—è: {message.from_user.first_name}')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@router.message(F.text == 'üå≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def contacts(message: Message):
    await message.answer_photo(photo='https://proza.ru/pics/2015/06/21/1155.jpg',
                               caption = '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª–∞–¥—ã. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞: —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–æ —Å–±–æ—Ä–æ–º –≥–µ–æ—Ç–æ—á–µ–∫.\n\n–í –ø–µ—Ä–≤–æ–º –≤–∞–º –≤—ã–¥–∞—ë—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞. –í–æ –≤—Ç–æ—Ä–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ –≥–µ–æ—Ç–æ—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –±–æ—Ç–æ–º, –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é". –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ, –≤–∞–º –≤—ã–¥–∞—Å—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –≥–µ–æ—Ç–æ—á–∫–∞.')

# –æ–ø–ª–∞—Ç–∞
@router.message(F.text == 'üíµ –û–ø–ª–∞—Ç–∞')
async def cmd_payments(message: Message):
    await message.answer('–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å :)')

                            ########################
                            # –∞–¥–º–∏–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è #
                            ########################
# –ø–∞–Ω–µ–ª—å–∫–∞
@router.message(F.text == 'üíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def panel(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb.panel)
    else:
        await dont_understand(message)

# –∞–¥–º–∏–Ω –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç')
async def create_route(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer('–ú–∞—Ä—à—Ä—É—Ç –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?', reply_markup=kb.choose_type)
    else:
        await dont_understand(message)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def delete_route(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer("–ú–∞—Ä—à—Ä—É—Ç –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=kb.delete_route)

#—É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
@router.callback_query(F.data=="offline")
async def get_type_offline(callback: CallbackQuery, state: FSMContext):
    b.type = 'offline'
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Form.number_route)

# —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
@router.callback_query(F.data == "online")
async def get_type_online(callback: CallbackQuery, state: FSMContext):
    b.type = 'online'
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Form.number_route)

@router.message(Form.number_route)
async def get_number_delete_route(message: Message, state:FSMContext):
    if b.type == "online":
        id = int(message.text)
        await db.delete_route_onl(id)
    elif b.type == "offline":
        id = int(message.text)
        await db.delete_route_ofl(id)
    await message.answer("–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    await state.clear()

# –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.callback_query(F.data == 'caption')
async def offline_route(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.prev)
    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–≤—å—é –º–∞—Ä—à—Ä—É—Ç–∞')

# –ø—Ä–µ–≤—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Form.prev)
async def preview_offline(message: Message, state: FSMContext):
    b.preview = message.text
    await state.update_data(name=message.text)
    await state.set_state(Form.caption_rout)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞')


# –∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ –±–¥ –æ—Ñ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Form.caption_rout)
async def add_offline(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await db.add_offline_rout(b.preview, message.text)
    await message.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    await state.clear()

# –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.callback_query(F.data == 'live')
async def online_route(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.prev_onl)
    await callback.message.answer('–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–≤—å—é –º–∞—Ä—à—Ä—É—Ç–∞')

# –ø—Ä–µ–≤—å—é –æ–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Form.prev_onl)
async def preview_online(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.number_points)
    b.cords.append(message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–æ—Ç–æ—á–µ–∫')

# —É–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–æ—Ç–æ—á–µ–∫
@router.message(Form.number_points)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    b.k = int(message.text)
    if b.k<=10:
        b.l = 0
        b.cords.append(int(message.text))
        await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–≤—É—é –≥–µ–æ—Ç–æ—á–∫—É')
        await state.set_state(Form.lat)
    else:
        await state.clear()

# –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def echo(message: Message):
    await dont_understand(message)